"""empty message

Revision ID: b2b33875455e
Revises: 
Create Date: 2019-07-01 21:08:36.102878

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b2b33875455e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=80), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('profile_pic_link', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email')),
    sa.UniqueConstraint('id', name=op.f('uq_user_id'))
    )
    op.create_table('confirmation',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('expire_at', sa.Integer(), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_confirmation_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_confirmation')),
    sa.UniqueConstraint('id', name=op.f('uq_confirmation_id'))
    )
    op.create_table('fermentable',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('brand', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_fermentable_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fermentable')),
    sa.UniqueConstraint('id', name=op.f('uq_fermentable_id'))
    )
    op.create_table('grain',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('brand', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_grain_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_grain')),
    sa.UniqueConstraint('id', name=op.f('uq_grain_id'))
    )
    op.create_table('hop',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('brand', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('alpha', sa.Float(precision=1), nullable=True),
    sa.Column('aroma', sa.String(length=240), nullable=True),
    sa.Column('typical_beer', sa.String(length=240), nullable=True),
    sa.Column('hop_type', sa.String(length=80), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_hop_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_hop')),
    sa.UniqueConstraint('id', name=op.f('uq_hop_id'))
    )
    op.create_table('recipe',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=240), nullable=False),
    sa.Column('target_abv', sa.Float(precision=3), nullable=True),
    sa.Column('actual_abv', sa.Float(precision=3), nullable=True),
    sa.Column('target_og', sa.Float(precision=3), nullable=True),
    sa.Column('actual_og', sa.Float(precision=3), nullable=True),
    sa.Column('target_fg', sa.Float(precision=3), nullable=True),
    sa.Column('actual_fg', sa.Float(precision=3), nullable=True),
    sa.Column('IBU', sa.Integer(), nullable=True),
    sa.Column('SRM', sa.Integer(), nullable=True),
    sa.Column('description', sa.UnicodeText(), nullable=True),
    sa.Column('instructions', sa.UnicodeText(), nullable=True),
    sa.Column('private', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_recipe_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_recipe'))
    )
    op.create_table('yeast',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('brand', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('yeast_style', sa.String(length=120), nullable=True),
    sa.Column('yeast_format', sa.String(length=80), nullable=True),
    sa.Column('min_attenuation_temp', sa.Integer(), nullable=True),
    sa.Column('max_attenuation_temp', sa.Integer(), nullable=True),
    sa.Column('min_fermenting_temp', sa.Integer(), nullable=True),
    sa.Column('max_fermenting_temp', sa.Integer(), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_yeast_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_yeast')),
    sa.UniqueConstraint('id', name=op.f('uq_yeast_id'))
    )
    op.create_table('recipes_fermentables',
    sa.Column('recipe_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('fermentable_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['fermentable_id'], ['fermentable.id'], name=op.f('fk_recipes_fermentables_fermentable_id_fermentable')),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], name=op.f('fk_recipes_fermentables_recipe_id_recipe')),
    sa.PrimaryKeyConstraint('recipe_id', 'fermentable_id', name=op.f('pk_recipes_fermentables'))
    )
    op.create_table('recipes_grains',
    sa.Column('recipe_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('grain_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['grain_id'], ['grain.id'], name=op.f('fk_recipes_grains_grain_id_grain')),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], name=op.f('fk_recipes_grains_recipe_id_recipe')),
    sa.PrimaryKeyConstraint('recipe_id', 'grain_id', name=op.f('pk_recipes_grains'))
    )
    op.create_table('recipes_hops',
    sa.Column('recipe_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('hop_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('hop_schedule', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['hop_id'], ['hop.id'], name=op.f('fk_recipes_hops_hop_id_hop')),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], name=op.f('fk_recipes_hops_recipe_id_recipe')),
    sa.PrimaryKeyConstraint('recipe_id', 'hop_id', name=op.f('pk_recipes_hops'))
    )
    op.create_table('recipes_yeasts',
    sa.Column('recipe_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('yeast_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('pitch_temp', sa.Integer(), nullable=True),
    sa.Column('pitch_time', sa.String(length=128), nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipe.id'], name=op.f('fk_recipes_yeasts_recipe_id_recipe')),
    sa.ForeignKeyConstraint(['yeast_id'], ['yeast.id'], name=op.f('fk_recipes_yeasts_yeast_id_yeast')),
    sa.PrimaryKeyConstraint('recipe_id', 'yeast_id', name=op.f('pk_recipes_yeasts'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('recipes_yeasts')
    op.drop_table('recipes_hops')
    op.drop_table('recipes_grains')
    op.drop_table('recipes_fermentables')
    op.drop_table('yeast')
    op.drop_table('recipe')
    op.drop_table('hop')
    op.drop_table('grain')
    op.drop_table('fermentable')
    op.drop_table('confirmation')
    op.drop_table('user')
    # ### end Alembic commands ###
